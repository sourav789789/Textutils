{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForms.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capital","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aria-checked","onClick","toggleMode","htmlFor","btn","TextForms","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","showAlert","split","join","document","getElementById","select","navigator","clipboard","writeText","length","prototype","PropTypes","string","defaultProps","App","setMode","_useState3","_useState4","setBtn","_useState5","_useState6","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a0db65ff.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n    const capital =(word)=>\n    {\n        let lower = word.toLowerCase(); \n        return lower.charAt(0).toUpperCase() + lower.slice(1);  \n        //convert types 1 letter uppercase Success from success\n    }\n    return (\n        props.alert && \n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capital(props.alert.type)}</strong> : {props.alert.msg}\n         </div>\n    )\n}\n \nexport default Alert\n\n\n//rfce react function based compnoent \n// if props.alert is true then the further element aftr && will be evauated and returneed ","import React from \"react\";\nimport PropTypes from 'prop-types'\n//import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n    return (\n        <div>\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n                <div className=\"container-fluid\">\n                    {/*<Link className=\"navbar-brand\" to=\"#\">\n                        {props.title}\n                    </Link>*/}\n                    <a className=\"navbar-brand\" href=\"#\">\n                        {props.title}\n                    </a>\n                    <button\n                        className=\"navbar-toggler\"\n                        type=\"button\"\n                        data-bs-toggle=\"collapse\"\n                        data-bs-target=\"#navbarSupportedContent\"\n                        aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\"\n                    >\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                            <li className=\"nav-item\">\n                                {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"#\">\n                                    Home\n                                </Link>*/}\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                                    Home\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                {/*<Link className=\"nav-link\" to=\"/about\">\n                                    About Textutils\n                            </Link>*/}\n                            {/*<a className=\"nav-link\" href=\"/about\">\n                                    About Textutils\n                        </a>*/}\n                            </li>\n                        </ul>\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? `dark` : `light`}`}>\n                            <input className=\"form-check-input\" type=\"checkbox\" aria-checked=\"false\" role=\"switch\"\n                                onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >{props.btn}</label>\n                        </div>\n                        {/*<form className=\"d-flex\">\n                            <input\n                                className=\"form-control me-2\"\n                                type=\"search\"\n                                placeholder=\"Search\"\n                                aria-label=\"Search\"\n                            />\n                            <button className=\"btn btn-outline-success\" type=\"submit\">\n                                Search\n                            </button>\n                        </form>*/}\n                    </div>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nNavbar.prototype = {                            // tells the props we are sending are of which type \n    title: PropTypes.string\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here'\n}\n\n// text-light to turn text in white color\n// test-dark to text on dark color ","import React, { useState } from \"react\";\n\nexport default function TextForms(props) {\n  const handleUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to Uppercase !\" , \"success\")\n    // set value to text so when method is invoked it value will be updated hence shown\n  };\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to Lower !\" , \"success\")\n    // set value to text so when method is invoked it value will be updated hence shown\n  };\n  // clear \n  const handleClear = () => {\n    let newText = \"\"\n    setText(newText);\n    props.showAlert(\"Text cleared !\" , \"success\");\n  }\n  // Remove extra spaces \n  const handleExtraSpace = () => {\n    let newText = text.split(/[ ]+/)\n    setText(newText.join(\" \"))\n    props.showAlert(\"Extra space removed !\" , \"success\")\n  }\n  //copy text \n  const handleCopy = () => {\n    var text = document.getElementById(\"box\")\n    text.select();\n    navigator.clipboard.writeText(text.value)\n    props.showAlert(\"Message copied !\" , \"success\")\n  }\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n    // set the value of text to the value which user will write in the box\n  };\n\n  const [text, setText] = useState('');\n  return (\n    <>\n      <div className=\"container my-4\" style={{ color: props.mode === 'light' ? `black` : `white` }}>\n        <h2>{props.heading}</h2>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            style={{\n              backgroundColor: props.mode === 'light' ? `white` : `#9fa8d3`,\n              color: props.mode === 'light' ? `black` : `white`\n            }}\n            onChange={handleOnChange}\n            id=\"box\"\n            rows=\"12\"\n          ></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\n          Convert to Uppercase\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\n          Convert to Lowercase\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>\n          Remove extra spaces\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\n          Copy text\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleClear}>\n          Clear\n        </button>\n      </div>\n      <div className=\"container px-3 py-3 mx-5\" style={{ color: props.mode === 'light' ? `black` : `white` }}>\n        <h2>Your text summary </h2>\n        <p>\n          {text.split(\" \").length - 1} words {text.length} character\n        </p>\n        <p>\n          {.008 * text.split(\" \").length - .008} Minutes read\n        </p>\n        <h2>Preview</h2>\n        <p>{text.length > 0 ?text : \"Enter your text for preview\"}</p>\n      </div>\n    </>\n  );\n}\n\nTextForms.defaultProps = {\n  heading: \"Enter the text to analyze below\",\n};\n// onclick necessary to tell which method to invoke on clicking\n// onchange necessary to type in text area\n// .008 minutes to read 1 word by average reader ","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n//import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForms from \"./components/TextForms\";\n/*import {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";*/\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');   // wether dark mode enabled or not \n  const [btn, setBtn] = useState('Enable dark mode');\n  const [alert, setAlert] = useState(null);\n\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      setBtn('Enable light mode ');\n      document.body.style.backgroundColor = '#7464e9';\n      showAlert(\"Dark mode has been enabled !\", \"success \");\n    }\n    else {\n      setMode('light');\n      setBtn('Enable dark mode ');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled !\", \"success \");\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} btn={btn} />\n      <Alert alert={alert} />\n      <TextForms showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n    </>\n  );\n}\n\nexport default App;\n\n/*<BrowserRouter>*/\n      /*<Routes>\n        <Route path=\"/\" element={<TextForms showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />} />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n  </BrowserRouter>*/\n// mode is for navbar and used at text colour change ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}